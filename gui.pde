/* =========================================================
 * ====                   WARNING                        ===
 * =========================================================
 * The code in this tab has been generated from the GUI form
 * designer and care should be taken when editing this file.
 * Only add/edit code inside the event handlers i.e. only
 * use lines between the matching comment tags. e.g.

 void myBtnEvents(GButton button) { //_CODE_:button1:12356:
     // It is safe to enter your event code here  
 } //_CODE_:button1:12356:
 
 * Do not rename this tab!
 * =========================================================
 */

public void solReleased(GButton source, GEvent event) { //_CODE_:releaseSol:211604:
  if ((burette.solution.volume - amount) < 0) {}
  else {
    if (burette.solution.volume <= 0) { burette.solution.volume = 0; flask.solution.volume = totalvol;}
    else { burette.solution.volume -= amount; flask.solution.volume += amount;} 
  }
} //_CODE_:releaseSol:211604:

public void button1_click1(GButton source, GEvent event) { //_CODE_:button1:240083:
  reset();
} //_CODE_:button1:240083:

public void amountChanged(GCustomSlider source, GEvent event) { //_CODE_:amountSlider:325717:
  amount = amountSlider.getValueF();
} //_CODE_:amountSlider:325717:

synchronized public void win_draw1(PApplet appc, GWinData data) { //_CODE_:window1:422646:
  appc.background(230);
} //_CODE_:window1:422646:

public void bSolChosen(GDropList source, GEvent event) { //_CODE_:buretteSols:306485:
  bSol = buretteSols.getSelectedText(); reset();
} //_CODE_:buretteSols:306485:

public void fSolChosen(GDropList source, GEvent event) { //_CODE_:flaskSols:870422:
  fSol = flaskSols.getSelectedText(); reset();
} //_CODE_:flaskSols:870422:

public void indicatorChosen(GDropList source, GEvent event) { //_CODE_:indicators:435425:
  indicator = indicators.getSelectedText();
} //_CODE_:indicators:435425:

synchronized public void win_draw2(PApplet appc, GWinData data) { //_CODE_:window2:551125:
  appc.background(230);
} //_CODE_:window2:551125:

public void bConEntered(GTextField source, GEvent event) { //_CODE_:bCon:424029:
  userBCon = float(bCon.getText());
} //_CODE_:bCon:424029:

public void fInitVolEntered(GTextField source, GEvent event) { //_CODE_:fInitVol:812902:
  userFInitVol = float(fInitVol.getText());
} //_CODE_:fInitVol:812902:

public void bVolUsedEntered(GTextField source, GEvent event) { //_CODE_:bVolUsed:866968:
  userUsedBVol = float(bVolUsed.getText());
} //_CODE_:bVolUsed:866968:

public void cbClicked(GButton source, GEvent event) { //_CODE_:calculateB:668878:
  float c = float(nf(calculateUserConcentration(), 0, 2));
  calculated.setText(str(c)+ " M");
  
  if (c == flask.solution.concentration) result.setText("You got it exactly right!");
  else if (abs(flask.solution.concentration-c) < 1) result.setText("Close, it's actually " + flask.solution.concentration + " M"); 
  else result.setText("It's actually " + flask.solution.concentration + " M. Re-do your titration.");
  
} //_CODE_:calculateB:668878:

public void rbClicked(GButton source, GEvent event) { //_CODE_:calculationResetB:383426:
  userBCon = 0.0; bCon.setText("");
  userFInitVol = 0.0; fInitVol.setText("");
  userUsedBVol = 0.0; bVolUsed.setText("");
  calculated.setText("0.0 M");
  result.setText("");  
} //_CODE_:calculationResetB:383426:



// Create all the GUI controls. 
// autogenerated do not edit
public void createGUI(){
  G4P.messagesEnabled(false);
  G4P.setGlobalColorScheme(GCScheme.BLUE_SCHEME);
  G4P.setMouseOverEnabled(false);
  surface.setTitle("Sketch Window");
  releaseSol = new GButton(this, 285, 255, 58, 29);
  releaseSol.setText("Release");
  releaseSol.setLocalColorScheme(GCScheme.YELLOW_SCHEME);
  releaseSol.addEventHandler(this, "solReleased");
  button1 = new GButton(this, 70, 400, 76, 35);
  button1.setText("Reset");
  button1.setLocalColorScheme(GCScheme.ORANGE_SCHEME);
  button1.addEventHandler(this, "button1_click1");
  amountSlider = new GCustomSlider(this, 292, 54, 83, 59, "purple18px");
  amountSlider.setShowValue(true);
  amountSlider.setShowLimits(true);
  amountSlider.setLimits(2.0, 0.0, 5.0);
  amountSlider.setShowTicks(true);
  amountSlider.setNumberFormat(G4P.DECIMAL, 2);
  amountSlider.setOpaque(false);
  amountSlider.addEventHandler(this, "amountChanged");
  label1 = new GLabel(this, 280, 23, 101, 26);
  label1.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label1.setText("Amount to Release (mL) ");
  label1.setOpaque(false);
  window1 = GWindow.getWindow(this, "Window title", 150, 50, 200, 300, JAVA2D);
  window1.noLoop();
  window1.setActionOnClose(G4P.KEEP_OPEN);
  window1.addDrawHandler(this, "win_draw1");
  buretteSols = new GDropList(window1, 32, 42, 108, 75, 2, 10);
  buretteSols.setItems(loadStrings("list_306485"), 1);
  buretteSols.addEventHandler(this, "bSolChosen");
  flaskSols = new GDropList(window1, 31, 133, 110, 78, 2, 10);
  flaskSols.setItems(loadStrings("list_870422"), 0);
  flaskSols.addEventHandler(this, "fSolChosen");
  indicators = new GDropList(window1, 27, 229, 114, 78, 2, 10);
  indicators.setItems(loadStrings("list_435425"), 0);
  indicators.addEventHandler(this, "indicatorChosen");
  buretteSol = new GLabel(window1, 47, 14, 80, 20);
  buretteSol.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  buretteSol.setText("Burette");
  buretteSol.setLocalColorScheme(GCScheme.PURPLE_SCHEME);
  buretteSol.setOpaque(false);
  flaskSol = new GLabel(window1, 45, 106, 80, 20);
  flaskSol.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  flaskSol.setText("Flask");
  flaskSol.setLocalColorScheme(GCScheme.CYAN_SCHEME);
  flaskSol.setOpaque(false);
  indicatorLabel = new GLabel(window1, 45, 201, 80, 20);
  indicatorLabel.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  indicatorLabel.setText("Indicator");
  indicatorLabel.setOpaque(false);
  window2 = GWindow.getWindow(this, "Window title", 900, 50, 300, 300, JAVA2D);
  window2.noLoop();
  window2.setActionOnClose(G4P.KEEP_OPEN);
  window2.addDrawHandler(this, "win_draw2");
  bCon = new GTextField(window2, 36, 97, 53, 19, G4P.SCROLLBARS_NONE);
  bCon.setOpaque(true);
  bCon.addEventHandler(this, "bConEntered");
  label2 = new GLabel(window2, 7, 68, 99, 29);
  label2.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label2.setText("Burette Concentration");
  label2.setOpaque(false);
  fInitVol = new GTextField(window2, 107, 97, 54, 20, G4P.SCROLLBARS_NONE);
  fInitVol.setOpaque(true);
  fInitVol.addEventHandler(this, "fInitVolEntered");
  label3 = new GLabel(window2, 103, 68, 88, 31);
  label3.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label3.setText("Flask Initial Volume (L)");
  label3.setOpaque(false);
  bVolUsed = new GTextField(window2, 72, 128, 56, 19, G4P.SCROLLBARS_NONE);
  bVolUsed.setOpaque(true);
  bVolUsed.addEventHandler(this, "bVolUsedEntered");
  label4 = new GLabel(window2, 53, 151, 94, 27);
  label4.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label4.setText("Burette Volume Used (L)");
  label4.setOpaque(false);
  calculateB = new GButton(window2, 156, 194, 90, 22);
  calculateB.setText("Calculate");
  calculateB.setLocalColorScheme(GCScheme.GREEN_SCHEME);
  calculateB.addEventHandler(this, "cbClicked");
  label5 = new GLabel(window2, 13, 7, 274, 25);
  label5.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label5.setText("CALCULATE THE CONCETRATION");
  label5.setLocalColorScheme(GCScheme.PURPLE_SCHEME);
  label5.setOpaque(true);
  label6 = new GLabel(window2, 14, 36, 273, 20);
  label6.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label6.setText("Use M1V1=M2V2 because 1:1 molar ratio");
  label6.setOpaque(false);
  calculationResetB = new GButton(window2, 40, 194, 90, 22);
  calculationResetB.setText("Reset");
  calculationResetB.setLocalColorScheme(GCScheme.ORANGE_SCHEME);
  calculationResetB.addEventHandler(this, "rbClicked");
  label7 = new GLabel(window2, 85, 98, 27, 20);
  label7.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label7.setText("x");
  label7.setOpaque(false);
  label8 = new GLabel(window2, 28, 107, 140, 20);
  label8.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label8.setText("_________________");
  label8.setOpaque(false);
  label9 = new GLabel(window2, 166, 112, 40, 20);
  label9.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label9.setText("=");
  label9.setOpaque(false);
  calculated = new GLabel(window2, 218, 112, 54, 20);
  calculated.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  calculated.setText("0.0 M");
  calculated.setLocalColorScheme(GCScheme.GREEN_SCHEME);
  calculated.setOpaque(true);
  result = new GLabel(window2, 194, 138, 102, 47);
  result.setTextAlign(GAlign.CENTER, GAlign.TOP);
  result.setLocalColorScheme(GCScheme.CYAN_SCHEME);
  result.setOpaque(false);
  equation = new GLabel(window2, 14, 260, 274, 27);
  equation.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  equation.setLocalColorScheme(GCScheme.CYAN_SCHEME);
  equation.setOpaque(true);
  label11 = new GLabel(window2, 60, 236, 185, 20);
  label11.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label11.setText("Balanced Chemical Equation");
  label11.setOpaque(false);
  label10 = new GLabel(window2, 199, 69, 89, 28);
  label10.setTextAlign(GAlign.CENTER, GAlign.MIDDLE);
  label10.setText("1 mL = 0.001 L");
  label10.setLocalColorScheme(GCScheme.YELLOW_SCHEME);
  label10.setOpaque(true);
  window1.loop();
  window2.loop();
}

// Variable declarations 
// autogenerated do not edit
GButton releaseSol; 
GButton button1; 
GCustomSlider amountSlider; 
GLabel label1; 
GWindow window1;
GDropList buretteSols; 
GDropList flaskSols; 
GDropList indicators; 
GLabel buretteSol; 
GLabel flaskSol; 
GLabel indicatorLabel; 
GWindow window2;
GTextField bCon; 
GLabel label2; 
GTextField fInitVol; 
GLabel label3; 
GTextField bVolUsed; 
GLabel label4; 
GButton calculateB; 
GLabel label5; 
GLabel label6; 
GButton calculationResetB; 
GLabel label7; 
GLabel label8; 
GLabel label9; 
GLabel calculated; 
GLabel result; 
GLabel equation; 
GLabel label11; 
GLabel label10; 
